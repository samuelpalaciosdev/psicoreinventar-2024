datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  patient
  doctor
  admin
}

model User {
  id                   String        @id @default(cuid())
  name                 String?
  email                String?       @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  role                 Role          @default(patient)
  isActive             Boolean       @default(true)
  phone                String?       @unique
  stripeCustomerId     String?       @unique
  stripeSubscriptionId String?
  // doctor role
  doctorExperience     String?
  doctorSpecialty      String?
  doctorEducation      String?
  // Relationships
  accounts             Account[]
  doctorAppointments   Appointment[] @relation("doctorAppointments")
  patientAppointments  Appointment[] @relation("patientAppointments")
}

model Product {
  stripeProductId String        @id
  name            String        @unique
  description     String
  price           Int
  isArchived      Boolean       @default(false)
  time            String
  active          Boolean       @default(true)
  appointments    Appointment[] // Relation to Appointment model
  Image           Image[] // Relation to Image model
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
}

model Appointment {
  id            String            @id @default(cuid())
  status        AppointmentStatus
  dateTime      String
  doctorId      String
  patientId     String
  stripePriceId String
  productId     String // Stripe product id
  isPaid        Boolean           @default(false)
  product       Product           @relation(fields: [productId], references: [stripeProductId])
  doctor        User              @relation("doctorAppointments", fields: [doctorId], references: [id])
  patient       User              @relation("patientAppointments", fields: [patientId], references: [stripeCustomerId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [stripeProductId], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
